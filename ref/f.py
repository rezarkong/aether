from utils import *

# 3-bit S-box
s3 = [ 0, 5, 3, 2, 6, 1, 4, 7 ]

# 4-bit S-box
s4 = [ 1, 0, 2, 4, 3, 8, 6, 13, 9, 10, 11, 14, 15, 12, 7, 5 ]

# 5-bit S-box
s5 = [ 
    0, 5, 10, 11, 20, 17, 22, 23, 9, 12, 3, 2, 13, 8, 15, 14,
    18, 21, 24, 27, 6, 1, 4, 7, 26, 29, 16, 19, 30, 25, 28, 31
]

m = [
        # 1 0 1 1 0 1 1 1 1 0 0 0 1 1 0 0
        [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0],
        # 0 1 1 1 1 0 0 1 1 1 0 1 1 1 0 1
        [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1],
        # 1 1 0 1 1 1 1 1 0 1 0 0 0 0 0 0
        [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0],
        # 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 1
        [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1],
        # 0 1 1 1 0 1 0 1 1 1 0 1 1 0 0 1
        [0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1],
        # 1 0 1 0 1 0 1 1 0 1 1 1 1 0 1 0
        [1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0],
        # 1 0 1 1 0 1 0 0 1 0 0 0 1 1 0 1
        [1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1],
        # 1 1 1 0 1 1 0 0 0 1 0 0 0 0 1 1
        [1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1],
        # 1 1 0 1 1 0 1 0 1 1 0 0 1 1 1 1
        [1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1],
        # 0 1 1 0 1 1 0 1 1 0 0 0 0 0 1 1
        [0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1],
        # 0 0 0 1 0 1 0 0 0 0 1 1 1 1 1 0
        [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0],
        # 0 1 0 1 1 1 0 0 0 0 1 1 0 0 1 0
        [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0],
        # 1 1 0 1 1 1 1 0 1 0 1 0 1 0 1 1
        [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1],
        # 1 1 0 1 0 0 1 0 1 0 1 0 0 0 1 1
        [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1],
        # 0 0 0 1 0 1 0 1 1 1 1 1 1 1 1 1
        [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        # 0 1 0 1 1 0 1 1 1 1 0 0 1 1 1 0
        [0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0]
]
mds = [
    [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1],
    [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1],
    [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1],
    [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
    [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0],
    [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0],
    [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1],
    [1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0],
    [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0],
    [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0],
    [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],
    [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0],
    [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0],
    [1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]
]
p = [   
    # 0 16 1 17 2 18 3 19 4 20 5 21 6 22 7 23
    0, 16, 1, 17, 2, 18, 3, 19, 4, 20, 5, 21, 6, 22, 7, 23,
    # 8 24 9 25 10 26 11 27 12 28 13 29 14 30 15 31
    8, 24, 9, 25, 10, 26, 11, 27, 12, 28, 13, 29, 14, 30, 15, 31
]

def sbox_lookup(x, sbox, b):
    return int2bits(sbox[bits2int(x)], b)

def branch(x, last):
    # substitution
    u = [0] * 128
    for i in range(16):
        j = 8 * i
        u[j : j + 3]     = sbox_lookup(x[j : j + 3], s3, 3)
        u[j + 3 : j + 8] = sbox_lookup(x[j + 3 : j + 8], s5, 5)

    if last:
        return u

    # theta
    v = [0] * 128
    for i in range(128):
        v[i] = u[(i + 12) % 128] ^ u[(i + 31) % 128] ^ u[(i + 86) % 128]

    # pi
    t = [ v[(117 * i) % 128] for i in range(128) ]

    return t

def f_gleeok(x):
    for i in range(3):
        x = branch(x, x == 2)
    return x

def f_enae(x):
    z = bits2nibbles(x)

    # print("z: ", [hex(i) for i in z])

    # 1st s-box
    u = [0]*32
    for i in range(32):
        u[i] = s4[z[i]]

    # print("u:", [hex(i) for i in u])

    # matrix mul
    v = [0]*32
    for i in range(16):
        for j in range(16):
            # v[i]    ^= (m[i][j] * u[j])
            # v[i+16] ^= (m[i][j] * u[j+16])
            v[i]    ^= (mds[i][j] * u[j])
            v[i+16] ^= (mds[i][j] * u[j+16])

    # print("v: ", [hex(i) for i in v])

    # 2nd s-box
    w = [0]*32
    for i in range(32):
        w[i] = s4[v[i]]

    # print("w: ", [hex(i) for i in w])

    # nibble permutation
    t = [0]*32
    for i in range(32):
        t[p[i]] = w[i]

    # print("t: ", [hex(i) for i in t])

    return nibbles2bits(t)

